

1. 개발도구 
A. JDK
 - JDK 다운
   https://www.oracle.com/java/technologies/javase-downloads.html
 - JDK 설치
   확인 : cmd, terminal   : java -version
 - JDK 환경변수 설정
   Java에 관련된 명령어의 위치를 OS에 알려주려는 목적
   
   1) 제어판\시스템 및 보안\시스템
   2) 고급시스템 설정 > 고급탭 > 환경변수
   3) 시스템변수 > 새로만들기	
   4) 변수이름 : JAVA_HOME
   5) 변수값    : java가 설치된 폴더(C:\Program Files\Java\jdk-11.0.10) 
   6) path > 편집
   7) 새로만들기 : %JAVA_HOME%\bin

B. STS(Editor)
   - STS 다운 : https://spring.io/tools
   - 설치 
   - STS 파일을 원하는 폴더로 이동
   - CMD에서 해당 폴더로 이동
   - java -jar STS파일명
   - workspace 폴더 생성
   - STS 실행
   - workspace 폴더 경로 선택

C. STS 환경 설정
   - window > preferences > general > workspace
   - Encoding > other, UTF-8 선택 > apply close 


2. Java Programming
   - OOP(Object Oriented Programming) 언어 중 하나
   - Java의 장점
     -- JVM(Java Virtual Machine)에서 실행
     -- 어떤 운영체제든(OS) JVM이 설치되어 있으면 
     -- 한번 만든 프로그램을 어떤 OS도 실행 가능

3. Java의 구성
   - Class 단위로 구성(기본단위)
   - Class는 변수와 메서드로 구성(세부 단위)


    -- 클래스 선언 공식
    
    접근지정자 class 클래스명{

	//변수 선언
	접근지정자 [그외지정자] 데이터타입 변수명;

	//메서드 선언
	접근지정자 [그외지정자] 리턴타입 메서드명([매개변수 선언들,,,]){
		//메서드 영역
	}	


    }

4. Java의 명명 규칙(이름 만드는 규칙)
	- 모든 이름은 이름만 보고 하는 역할이 추측 가능
	- 변수명은 명사형식 사용
	- 메서드명은 동사형식(명령) 사용

    1) 클래스명	- 첫글자는 대문자로 시작
    2) 변수명	- 첫글자는 소문자로 시작 
    3) 메서드명	- 첫글자는 소문자로 시작	
    4) 변수와 메서드의 구분은 끝에 () 없으면 변수, 있으면 메서드
    5) 두단어 이상을 합쳐서 이름을 만들때
	ex) max + level  
	-- Camel 표기법 (주로 Java에서 사용)
	   -- 두번째단어, 또는 뒤에 연결되는 단어에 첫글자를 대문자로 
	   -- maxlevelisyourlevel -> maxLevelIsYourLevel
	   -- class명    :  MaxLevel
	   -- 변수명    :  maxLevel
                -- 메서드명  : maxLevel()

	-- Snake 표기법
	  -- 단어와 단어 사이에 _(언더바) 로 연결 	
	   -- class명    :  Max_level
	   -- 변수명    :  max_level
                -- 메서드명  : max_level()

    6) 모든 이름은 숫자로 시작해서는 안됌
    7) 특수문자 _ , $ 만 가능
    8) 띄어쓰기 불가
    9) 한글 가능하지만 쓰지 마세요!!!!

5. Package
    - 비슷한 역할을 하는 class들을 저장하는 폴더
    - 패키지명은 전세계에서 중복되지 않는 이름으로 작성
    - 도메인명의 역순으로 작성
    - com.google.***.***

-----------------------------------------------------------------------------------------
	변수와 리터럴

1. 변수
	변하는 수
	하나의 값을 저장하는 메모리상의 공간

2. 상수
	변하지 않는 수

3. 리터럴
	변수에 넣는 상수 데이터
	x=3

4. 데이터 타입(자료형) 과 변수
   - 데이터타입의 선택은 리터럴의 타입을 보고 결정

  A. Primitive Type(원시타입, 기본타입..) : 더 이상 분리 할 수 없는 데이터
	숫자
	      1) 정수형 : 소숫점이 없는 숫자
		      : byte  - 1byte -128 - 127	- bit를 다뤄야 할 때 사용
		      : short - 2byte -32768 - 32767   - c 언어와의 호환
		      : int    - 4byte -20억 -  20억
		      : long - 8byte ???0 -???       - int와 구별하기 위해 리터럴뒤에 L(소문자 l)을 붙임
 
	      2) 실수형 : 소숫점이 있는 숫자
		      : float     4byte   - double과 구별하기 위해 리터럴뒤에 F(f) 를 붙임
		      : double 8byte

	문자
	     한글자만 담는 타입, 리터럴 앞뒤로 ' ' 작성
	     char	      : 2byte

	논리
	     참(true), 거짓(false)
	     boolean    : 1byte

  B. Reference Type(참조타입)		: 여러가지 데이터타입으로 구성된 타입
	문자열
	String - 문자열 담는 타입 String name = "iu";		


5. 변수 선언 과 초기화
    1) 변수 선언
   데이터타입 변수명;

    2) 초기화
    선언된 변수에 최초로 값을 넣는 것

    3) 초기화를 하지 않은 변수는 사용불가

6. 기본 초기값
    정수형 : 0
    실수형 : 0.0
    문자형 :  (스페이스바)
    논리형 : false


--------------------------------------------------------------------------------
	형변환(Cascading, 형태의 변환)
	- primitive 타입끼리만 가능
	- 단, boolean 타입은 제외
	- 누가 수의 표현의 갯수가 더 많은 것이 기준
	- 포함

	- 작은것에서 큰것으로 변환 자동형변환
	- 큰것에서 작은것으로 변환 강제형변환

	- 형식
	A = (형변환 할 데이터타입)B
	ex) int num =0;
	     long num2 = 0;
	     num2 = (long)num;

	1. 자동형변환(묵시적 형변환)
	  - 작은것에서 큰것으로 변환 자동형변환
	  - 형변환 할 데이터타입 표시를 삭제(생략) 가능
	  - 데이터의 변환이 없음

	2. 강제형변환
	  - 큰것에서 작은것으로 변환 강제형변환
	  - 형변환 할 데이터타입은 무조건 표시
	  - 데이터의 변환이 있을 수 있음


	* 컴퓨터는 소수점 표현을 정확하게 할 수 없음. 근사치를 제공
	1
	1.00000001
	1.00000002

--------------------------------------------------------------------------------
	연산자

1. 산술연산자
	1) +
		-- a) 산술연산자 : 숫자 계산
		-- b) 연결연산자 : String을 더할 때 결과물은 String
	2) -
	3) *
	4) /	: 몫 구하기
	5) %	:  나머지 구하기

2. 비교연산자(관계연산자)
	결과물은 boolean 
	1)  A > B		초과
	2)  A < B		미만
	3)  A >= B	이상
	4)  A <= B	이하
	5)  A == B	이퀄
	6)  A != B		not이퀄

3. 논리연산자
	boolean 타입 연산 - 결과값은 boolean
	1) boolean && boolean  : and 연산 
		true && true && false
		false && true && true

	2) boolean || boolean     : or 연산
		true || true || fasle
		false || true || true

	4) !boolean 	        : not 연산


		false || true && true
		false && true || true
		
	SAMSUNG
	- 토익 : 950점 이상
	- 학력 : 박사학위 소지자 이상
	- 해외여행에 결격 사유가 없는자

	A 
	토익 980점
	학사학위 소지
	해외여행 가능

4. 삼항연산자
	조건식은 결과물이 boolean
	조건식?조건식이 true 일때 실행:조건식이 false일때 실행	


5. 증감연산자
	-- 단독을 쓸 때는 선행, 후행의 결과물이 같음
	-- 다른 항이 있거나 연산을 할 때는 달라짐
	-- 후행 연산은 우선순위가 젤 끝
	-- 대입연산자보다 우선순위가 낮음
	1) ++A(선행)	: 1 증가	A= A+1;
	    A++(후행)	: 1 증가
	2) --A  (선행)	: 1 감소	A=A-1;
	    A--  (후행)	: 1 감소

6. 향상된 대입연산자
	a = a+5	=>	a+=5
	a = a-3	=>	a-=3
	a = a%6  =>	a%=6
	a = b+6	=>	X

7. 쉬프트 연산자 (비트)
	1) A << B : 정수A의 bit 를 B만큼 좌측으로 밀고 빈칸은 0으로 채움
	2) A >> B : 정수A의 bit를 B만큼 우측으로 밀고 	
		   A가 양의 숫자면 빈칸을 0으로 채우고
		   A가 음의 숫자면 빈칸을 1 로 채움
	3) A >>> B : 정수A의 bit를 B만큼 우측으로 밀고 빈칸은 전부 0으로 채움

8. 비트논리연산자
	0 : False , 1: True

	1) A&B : and 연산 
	    3&2
	2) A|B  : or 연산
	
	3) ~A  : not 연산 
	   ~3  

-----------------------------------------------------------------------------------------
	Statement

	- Scope : 영역 {   }
	- 영역내에서 선언된 변수는 해당영역이 종료되면 같이 사라짐
	- 클래스 영역을 제외한 { } 내에 선언된 변수를 지역 변수라 함
	- Life Cycle(생명주기)


1. 조건문

	1) 단일 if	

		if(조건식){ 조건식이 true일때만 실행   }














